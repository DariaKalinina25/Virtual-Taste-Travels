def cli_arg_version
  return unless invoked_as_script?
  return unless running_bundle_update?

  find_bundler_version
end

def running_bundle_update?
  ARGV.first.to_s.start_with?('update')
end

def find_bundler_version
  bundler_version = nil
  ARGV.each_with_index do |arg, index|
    next unless bundler_flag?(arg)

    bundler_version = bundler_version_from_argument(arg)
    break
  end
  bundler_version
end

def bundler_flag?(arg)
  arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
end

def bundler_version_from_argument(arg)
  match_data = arg.match(/\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/)
  match_data && match_data[1]
end

def activate_bundler
  gem_error = install_bundler_gem
  return if gem_error.nil?

  require_error = require_bundler_version
  return if require_error.nil? && required_bundler_version_installed?

  handle_activation_failure(gem_error)
end

def install_bundler_gem
  activation_error_handling do
    gem 'bundler', bundler_requirement
  end
end

def require_bundler_version
  activation_error_handling do
    require 'bundler/version'
  end
end

def required_bundler_version_installed?
  Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
end

def handle_activation_failure(gem_error)
  warn_warning_message(gem_error)
  exit 42
end
